* {
   box-sizing: border-box;
}
body, section, header, div, p, h1, h2, h3, ul, li, figure, figcaption {
   margin: 0;
   padding: 0;
}
body {
   font-family: 'Open Sans', sans-serif;
   box-sizing: border-box;
   background-color: #F0F4F8;
   font-weight: 300;
}

/* 1. First, let's style the <header> element. Set the background-image to the image in the images folder. Set the background-size to cover. Set the width of the <header> to 100% and its min-height to 500px. */
header {
   background-image: url(images/florence.jpg);
   background-size: cover;
   background-position: center;
   width: 100%;
   min-height: 500px;
   position: relative;
}

header::before {
   content: '';
   position: absolute;
   top: 0;
   left: 0;
   right: 0;
   bottom: 0;
   background: linear-gradient(to bottom, rgba(0,0,0,0.3), rgba(0,0,0,0.1));
}

/* 2. Next, add the logo in the top-left corner as a background-image to the <nav> element. Set its size to about 60px. The padding and height of the <nav> will also have to be set based on the size of the logo. Also make sure the logo image does not repeat. */
nav {
  background-image: url(images/logo.svg);
  background-size: 60px;
  background-repeat: no-repeat;
  background-position: 10px 5px;
  word-spacing:20px;
  padding: 20px;
  height: 100px;
}

/* 3. Now, style the navigation links. For each list item in the <nav> element, remove the list bullets by setting the list-style-type to none. Make the list horizontal by setting the display property of each <li> to inline-block. Set the link, visited, and hover colors of the navigation links. */
nav li {
   display: inline-block;
   list-style-type: none;
   transition: transform 0.3s ease;
}

nav li:hover {
   transform: translateY(-2px);
}

/* 4. Set the margin of the ul within the <nav> to move the ul left of the logo, so it's elements do not overlap the logo. */
nav ul {
   margin-left: 80px;
}

/* 5. We'll also need to make sure the links are styled correctly. We can do this by using the a selector. We can also use the :visited, and :hover pseudo-classes to style the links when they are in different states. We can also use the :active pseudo-class to style the link when it is being clicked. */
nav a {
   color: #51279b;
   text-decoration: none;
   padding: 10px;
   font-weight: 600;
   position: relative;
   transition: all 0.3s ease;
}

nav a::after {
   content: '';
   position: absolute;
   bottom: 5px;
   left: 10px;
   right: 10px;
   height: 2px;
   background-color: #8662c7;
   transform: scaleX(0);
   transition: transform 0.3s ease;
}

nav a:hover::after {
   transform: scaleX(1);
}

nav a:visited {
   color: #8662c7;
}

nav a:hover {
   color: #8662c7;
   text-decoration: none;
}

/* 6. Now, we can move on to the text in the center of the hero. Set the margin of the <div> within the <header> to position it roughly in the vertical middle of the big photo. Set its left margin so it is aligned with the navigation. */
header div {
   margin: 100px 0 0 80px;
   color: white;
   position: relative;
   z-index: 5;
   animation: fadeInUp 1s ease-out;
}

@keyframes fadeInUp {
   from {
      opacity: 0;
      transform: translateY(30px);
   }
   to {
      opacity: 1;
      transform: translateY(0);
   }
}

/* 7. Then we need to style the hero text. Per the mockup, it should be white, and the font size should be 48px for the <h2> element and 24px for the <p> element. */
header h2 {
   font-size: 48px;
   margin-bottom: 0.5rem;
   text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.5);
   letter-spacing: 1px;
}

header p {
   font-size: 24px;
   margin-bottom: 1.5rem;
   text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.5);
}

/* 8. There is a button in the hero, so we need to style that next. The button is nothing more than an anchor tag with a background color, and some padding. We can also use the :hover pseudo-class to style the button when the user hovers over it. */
header div a {
   background-color: #51279b;
   color: white;
   padding: 10px 20px;
   text-decoration: none;
   border-radius: 5px;
   display: inline-block;
   transition: all 0.3s ease;
   box-shadow: 0 4px 15px rgba(81, 39, 155, 0.3);
}

header div a:hover {
   background-color: #8662c7;
   transform: translateY(-2px);
   box-shadow: 0 6px 20px rgba(134, 98, 199, 0.4);
}

/* 9. Now we need to style the cards. The card <div> elements need to be on a single line, so set the display property of each card to float left. For the <div> within the card (and its contents), set their padding and margins to get a similar appearance as Figure 4.43. */
main {
   display: flex;
   justify-content: center;
   gap: 20px;
   padding: 40px 20px;
   max-width: 1400px;
   margin: 0 auto;
}

.card {
   flex: 1;
   min-width: 280px;
   max-width: 400px;
   background-color: white;
   border-radius: 12px;
   overflow: hidden;
   box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
   transition: all 0.4s ease;
}

.card:hover {
   transform: translateY(-10px);
   box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
}

/* 10. Now we can style the card content. The card content should be left aligned, but we need to add a bit of padding around it. The image also needs to be full width, to expand to the width of it's parent container. The div.description element needs to have a font size of 12px, and the h3 element needs to have a font size of 14px. */
.card div {
   padding: 20px 20px;
}

.card img {
   width: 100%;
   height: 250px;
   object-fit: cover;
   transition: transform 0.4s ease;
}

.card:hover img {
   transform: scale(1.05);
}

.card .description {
   font-size: 12px;
   color: #666;
   line-height: 1.6;
}

.card h3 {
   font-size: 14px;
   font-weight: 600;
   margin-bottom: 10px;
   color: #333;
}

/* 11. Let's add the icons for the comments and favorites. First, target the .social class selector. We'll add a margin top of 1rem, and set the font size to 12px per the mockup. */
.social {
   margin-top: 1rem;
   font-size: 12px;
   display: flex;
   align-items: center;
   color: #999;
}

/* 12. Next, let's target both of the .social span elements. The styles between the comment and the heart icon are very similar, so we save some keystrokes by targeting the most generic selector. The only difference between the .heart and .comment elements are their background images. */
.social span {
   background-size: contain;
   background-repeat: no-repeat;
   padding-left: 25px;
   margin-right: 10px;
   transition: all 0.3s ease;
   cursor: pointer;
}

.social span:hover {
   color: #51279b;
   transform: scale(1.1);
}

.social .heart {
   background-image: url(./images/heart.png);
}

.social .comment {
   background-image: url(./images/comment.png);
}

/* 13. Finally, on your own, try and refactor the main > .card in such a way where the parent main element uses flexbox to manage the layout of the children .cards instead of floats. Because we have written the cards to use percentage widths, there is a small gap at the end of the cards on the right. Can you use flexbox to remove the gap? */
@media (max-width: 1024px) {
   main {
      flex-wrap: wrap;
   }
   
   .card {
      width: calc(50% - 10px);
   }
}

@media (max-width: 768px) {
   nav ul {
      margin-left: 80px;
      display: flex;
      flex-wrap: wrap;
   }
   
   header h2 {
      font-size: 36px;
   }
   
   header p {
      font-size: 18px;
   }
   
   header div {
      margin: 80px 30px 0 30px;
   }
   
   main {
      flex-direction: column;
      align-items: center;
   }
   
   .card {
      width: 100%;
      max-width: 500px;
   }
}